import numpy as np
import matplotlib.pyplot as plt
plt.style.use(['seaborn-whitegrid'])
x=10*np.random.rand(50)
y=2*x+np.random.rand(50)
plt.scatter(x,y);
#1. 적절한 estimator 클래스를 임포트해서 모델의 클래스 선택
from sklearn.linear_model import LinearRegression
#2. 클래스를 원하는 값으로 인스턴스화해서 모델의 하이퍼파라미터 선택
model=LinearRegression(fit_intercept=True)
model
X=x[:,np.newaxis]
X
#4. 모델 인스턴스의 fit() 메서드를 호출해 모델을 데이터에 적합
model.fit(X,y)
model.coef_
model.intercept_
#모델을 새 데이터에 대해서 적용
xfit=np.linspace(-1,11)
Xfit=xfit[:,np.newaxis]
yfit=model.predict(Xfit)
plt.scatter(x,y)
plt.plot(xfit, yfit,'--r')

from sklearn.datasets import load_diabetes

diabetes=load_diabetes()
print(diabetes.keys())
print(diabetes.data)
print(diabetes.target)
print(diabetes.DESCR)
print(diabetes.feature_names)
print(diabetes.data_filename)
print(diabetes.target_filename)

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_diabetes
diabtetes=load_diabetes()
X_train, X_test, y_train, y_test=train_test_split(diabetes.data,diabetes.target, test_size=0.3)

model=LinearRegression()
model.fit(X_train,y_train)
print("학습 데이터 점수: {}".format(model.score(X_train,y_train)))
print("평가 데이터 점수: {}".format(model.score(X_test,y_test)))


import matplotlib.pyplot as plt
predicted=model.predict(X_test)
expected=y_test
plt.figure(figsize=(8,4))
plt.scatter(expected, predicted)
plt.plot([30,350],[30,350],'--r')
plt.tight_layout()

from sklearn.model_selection import cross_val_score, cross_validate
scores=cross_val_score(model, diabetes.data, diabetes.target, cv=5)
print("교차 검증 정학도: {}".format(scores))
print("교차 검증 정학도: {} +/- {}".format(np.mean(scores),np.std(scores)))

from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import Ridge
import pandas as pd

alpha=[0.001,0.01,0.1,1,10,100,1000]
param_grid=dict(alpha=alpha)
gs=GridSearchCV(estimator=Ridge(), param_grid=param_grid, cv=10)
result=gs.fit(diabetes.data, diabetes.target)

print("최적 점수: {}".format(result.best_score_))
print("최적 파라미터: {}".format(result.best_params_))
print(gs.best_estimator_)
pd.DataFrame(result.cv_results_)

import multiprocessing
from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
iris=load_iris()
param_grid=[  {  'penalty':['l1','l2'],
                'C':[0.5,1.0,1.5,1.8,2.0,2.4]    }]
gs=GridSearchCV(estimator=LogisticRegression(),param_grid=param_grid,
                scoring='accuracy', cv=10, n_jobs=multiprocessing.cpu_count())
result=gs.fit(iris.data, iris.target)
print("최적 점수: {}".format(result.best_score_))
print("최적 파라미터: {}".format(result.best_params_))
print(gs.best_estimator_)
pd.DataFrame(result.cv_results_)
#출처:https://www.youtube.com/watch?v=eVxGhCRN-xA
